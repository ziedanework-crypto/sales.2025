import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# ุชุญููู ุงูุจูุงูุงุช ูู sales.csv
df = pd.read_csv("sales.csv")

# ุงุณุชุฎุฑุงุฌ ุฃุณูุงุก ุงูุดููุฑ
months = df.columns[1:]

# ุชูุธูู ุงูุฃุฑูุงู
for col in months:
    df[col] = df[col].astype(str).str.replace(",", "").str.strip()
    df[col] = pd.to_numeric(df[col], errors="coerce")

# ุฅุนุฏุงุฏ ุงูุตูุญุฉ
st.set_page_config(page_title="ููุญุฉ ุชุญููู ุงููุจูุนุงุช", layout="wide")
st.title("๐ ููุญุฉ ุชุญููู ุงููุจูุนุงุช ุญุณุจ ุทุฑู ุงูุฏูุน ูุงูุดููุฑ")

# ===== ๐๏ธ ุงูููุงุชุฑ =====
st.sidebar.header("ุฎูุงุฑุงุช ุงูุนุฑุถ")
selected_methods = st.sidebar.multiselect("ุงุฎุชุฑ ุทุฑู ุงูุฏูุน", options=df["ุญุงูุฉ ุงูุฏูุน"].unique(), default=df["ุญุงูุฉ ุงูุฏูุน"].unique())
selected_months = st.sidebar.multiselect("ุงุฎุชุฑ ุงูุดููุฑ", options=months, default=list(months))

# ุชุตููุฉ ุงูุจูุงูุงุช
filtered_df = df[df["ุญุงูุฉ ุงูุฏูุน"].isin(selected_methods)][["ุญุงูุฉ ุงูุฏูุน"] + selected_months]
df_long = filtered_df.melt(id_vars=["ุญุงูุฉ ุงูุฏูุน"], var_name="ุงูุดูุฑ", value_name="ุงููููุฉ")

# ===== ๐ ุฌุฏูู ุงูุจูุงูุงุช =====
st.subheader("๐ ุงูุจูุงูุงุช ุจุนุฏ ุงูุชูุธูู ูุงูุชุตููุฉ")
st.dataframe(filtered_df)

# ===== ๐ ุชุทูุฑ ุทุฑู ุงูุฏูุน ุนุจุฑ ุงูุดููุฑ =====
fig_line = px.line(
    df_long, x="ุงูุดูุฑ", y="ุงููููุฉ", color="ุญุงูุฉ ุงูุฏูุน", markers=True,
    title="ุชุทูุฑ ุทุฑู ุงูุฏูุน ุนุจุฑ ุงูุดููุฑ",
    color_discrete_sequence=px.colors.qualitative.Set2
)
st.plotly_chart(fig_line, use_container_width=True)

# ===== ๐ฅง ุฑุณู ุฏุงุฆุฑู ููู ุดูุฑ =====
st.subheader("๐ฅง ุชูุฒูุน ุงููุดุชุฑูุงุช ุญุณุจ ุทุฑููุฉ ุงูุฏูุน ููู ุดูุฑ")
for month in selected_months:
    month_data = filtered_df[["ุญุงูุฉ ุงูุฏูุน", month]].dropna()
    fig_pie = px.pie(
        month_data, names="ุญุงูุฉ ุงูุฏูุน", values=month,
        title=f"ุชูุฒูุน ุทุฑู ุงูุฏูุน - {month}",
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    st.plotly_chart(fig_pie, use_container_width=True)

# ===== ๐ ุชุญููู ุฅุญุตุงุฆู ููู ุทุฑููุฉ ุฏูุน =====
st.subheader("๐ ุชุญููู ูุชูุณุท ุงูุฃุฏุงุก ูุงูุชุฐุจุฐุจ ูุงููุฏู")
stats = df_long.groupby("ุญุงูุฉ ุงูุฏูุน")["ุงููููุฉ"].agg(["mean", "std", "min", "max"])
stats["range"] = stats["max"] - stats["min"]
stats["change_rate"] = stats["range"] / stats["mean"]
stats = stats.sort_values(by="mean", ascending=False)
st.dataframe(stats.style.format("{:,.0f}"))

# ===== ๐ ูุชูุณุท ุงููุดุชุฑูุงุช =====
fig_avg = px.bar(
    stats.reset_index(), x="ุญุงูุฉ ุงูุฏูุน", y="mean",
    title="ูุชูุณุท ุงููุดุชุฑูุงุช ููู ุทุฑููุฉ ุฏูุน",
    color="ุญุงูุฉ ุงูุฏูุน", color_discrete_sequence=px.colors.qualitative.Bold
)
st.plotly_chart(fig_avg, use_container_width=True)

# ===== ๐ ุงูุชุฐุจุฐุจ =====
fig_std = px.bar(
    stats.reset_index(), x="ุญุงูุฉ ุงูุฏูุน", y="std",
    title="ุชุฐุจุฐุจ ุงูุฃุฏุงุก (ุงูุงูุญุฑุงู ุงููุนูุงุฑู)",
    color="ุญุงูุฉ ุงูุฏูุน", color_discrete_sequence=px.colors.qualitative.Prism
)
st.plotly_chart(fig_std, use_container_width=True)

# ===== ๐ ุฅุฌูุงูู ุงููุดุชุฑูุงุช ููู ุดูุฑ =====
st.subheader("๐ ุฅุฌูุงูู ุงููุดุชุฑูุงุช ููู ุดูุฑ")
total_per_month = df[months].sum().reset_index()
total_per_month.columns = ["ุงูุดูุฑ", "ุงูุฅุฌูุงูู"]
fig_total = px.bar(
    total_per_month, x="ุงูุดูุฑ", y="ุงูุฅุฌูุงูู",
    title="ุฅุฌูุงูู ุงููุดุชุฑูุงุช ุงูุดูุฑูุฉ",
    color="ุงูุดูุฑ", color_discrete_sequence=px.colors.qualitative.Set1
)
st.plotly_chart(fig_total, use_container_width=True)

# ===== ๐ฅง ุฑุณู ุฏุงุฆุฑู ููุฅุฌูุงูู ุญุณุจ ุทุฑููุฉ ุงูุฏูุน =====
st.subheader("๐ฅง ุชูุฒูุน ุฅุฌูุงูู ุงููุดุชุฑูุงุช ุญุณุจ ุทุฑููุฉ ุงูุฏูุน")
total_by_method = df.set_index("ุญุงูุฉ ุงูุฏูุน")[months].sum(axis=1).reset_index()
total_by_method.columns = ["ุญุงูุฉ ุงูุฏูุน", "ุงูุฅุฌูุงูู"]
fig_pie_total = px.pie(
    total_by_method, names="ุญุงูุฉ ุงูุฏูุน", values="ุงูุฅุฌูุงูู",
    title="ูุณุจ ุชูุฒูุน ุทุฑู ุงูุฏูุน",
    color_discrete_sequence=px.colors.qualitative.Set3
)
st.plotly_chart(fig_pie_total, use_container_width=True)

# ===== ๐ฌ ุชูุตูุงุช ูุชุญููุฒ =====
st.subheader("๐ฌ ุชูุตูุงุช ูุงููุฉ ูุชุญููุฒูุฉ")
for index, row in stats.iterrows():
    avg = row["mean"]
    std = row["std"]
    rate = row["change_rate"]
    if avg > df_long["ุงููููุฉ"].mean() and std < df_long["ุงููููุฉ"].std():
        st.markdown(f"- {index}: ุฃุฏุงุก ููู ููุชุฒูุ ููุงุณุจ ููุชูุณุน ุงููุงูู ุจุซูุฉ.")
    elif rate < 0.2:
        st.markdown(f"- {index}: ุชุฐุจุฐุจ ููุฎูุถุ ูุซุงูู ููุชุฎุทูุท ุทููู ุงููุฏู.")
    elif std > df_long["ุงููููุฉ"].std():
        st.markdown(f"- {index}: ุชุฐุจุฐุจ ูุฑุชูุนุ ุฑุงูุจ ุงูุฃุฏุงุก ุงูุดูุฑู ุจุนูุงูุฉ.")
    else:
        st.markdown(f"- {index}: ุฃุฏุงุก ูุชูุณุทุ ูููู ุชุญุณููู ุจุชุนุฏูู ุดุฑูุท ุงูุฏูุน ุฃู ุงูุชูููุช.")