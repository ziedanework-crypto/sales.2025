import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# ุชุญููู ุงูุจูุงูุงุช
df = pd.read_csv("sales.csv")

# ุงุณุชุฎุฑุงุฌ ุฃุณูุงุก ุงูุดููุฑ
months = df.columns[1:]

# ุชูุธูู ุงูุฃุฑูุงู
for col in months:
    df[col] = df[col].astype(str).str.replace(",", "").str.strip()
    df[col] = pd.to_numeric(df[col], errors="coerce")

# ุฅุนุฏุงุฏ ุงูุตูุญุฉ
st.set_page_config(page_title="ููุญุฉ ุชุญููู ุงููุดุชุฑูุงุช", layout="wide")
st.title("๐ ููุญุฉ ุชุญููู ุงููุดุชุฑูุงุช ุญุณุจ ุทุฑู ุงูุฏูุน ูุงูุดููุฑ")

# ===== ๐๏ธ ุงูููุงุชุฑ =====
st.sidebar.header("ุฎูุงุฑุงุช ุงูุนุฑุถ")
selected_methods = st.sidebar.multiselect("ุงุฎุชุฑ ุทุฑู ุงูุฏูุน", options=df["ุญุงูุฉ ุงูุฏูุน"].unique(), default=df["ุญุงูุฉ ุงูุฏูุน"].unique())
selected_months = st.sidebar.multiselect("ุงุฎุชุฑ ุงูุดููุฑ", options=months, default=list(months))
compare_methods = st.sidebar.multiselect("ูุงุฑู ุจูู ุทุฑููุชูู ุฏูุน", options=df["ุญุงูุฉ ุงูุฏูุน"].unique(), default=[])

# ุชุตููุฉ ุงูุจูุงูุงุช
filtered_df = df[df["ุญุงูุฉ ุงูุฏูุน"].isin(selected_methods)][["ุญุงูุฉ ุงูุฏูุน"] + selected_months]
df_long = filtered_df.melt(id_vars=["ุญุงูุฉ ุงูุฏูุน"], var_name="ุงูุดูุฑ", value_name="ุงููููุฉ")

# ===== ๐ ุฌุฏูู ุงูุจูุงูุงุช =====
st.subheader("๐ ุงูุจูุงูุงุช ุจุนุฏ ุงูุชูุธูู ูุงูุชุตููุฉ")
st.dataframe(filtered_df)

# ===== ๐ ุชุทูุฑ ุทุฑู ุงูุฏูุน ุนุจุฑ ุงูุดููุฑ =====
fig_line = px.line(
    df_long, x="ุงูุดูุฑ", y="ุงููููุฉ", color="ุญุงูุฉ ุงูุฏูุน", markers=True,
    title="ุชุทูุฑ ุทุฑู ุงูุฏูุน ุนุจุฑ ุงูุดููุฑ",
    color_discrete_sequence=px.colors.qualitative.Set2
)
st.plotly_chart(fig_line, use_container_width=True)

# ===== ๐ฅง ุฑุณูู ุฏุงุฆุฑูุฉ ุฌูุจ ุจุนุถ =====
st.subheader("๐ฅง ุชูุฒูุน ุงููุดุชุฑูุงุช ุญุณุจ ุทุฑููุฉ ุงูุฏูุน ููู ุดูุฑ")
chunk_size = 3
month_chunks = [selected_months[i:i+chunk_size] for i in range(0, len(selected_months), chunk_size)]

for chunk in month_chunks:
    cols = st.columns(len(chunk))
    for i, month in enumerate(chunk):
        with cols[i]:
            month_data = filtered_df[["ุญุงูุฉ ุงูุฏูุน", month]].dropna()
            fig_pie = px.pie(
                month_data, names="ุญุงูุฉ ุงูุฏูุน", values=month,
                title=f"{month}",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            st.plotly_chart(fig_pie, use_container_width=True)

# ===== ๐ ุชุญููู ุฅุญุตุงุฆู ุดุงูู =====
st.subheader("๐ ุชุญููู ูุชูุณุท ุงูุฃุฏุงุก ูุงูุชุฐุจุฐุจ ูุงููุฏู")
stats = df_long.groupby("ุญุงูุฉ ุงูุฏูุน")["ุงููููุฉ"].agg(["mean", "std", "min", "max"])
stats["range"] = stats["max"] - stats["min"]
stats["change_rate"] = stats["range"] / stats["mean"]
stats = stats.sort_values(by="mean", ascending=False)
st.dataframe(stats.style.format("{:,.0f}"))

# ===== ๐ ูุชูุณุท ุงููุดุชุฑูุงุช =====
fig_avg = px.bar(
    stats.reset_index(), x="ุญุงูุฉ ุงูุฏูุน", y="mean",
    title="ูุชูุณุท ุงููุดุชุฑูุงุช ููู ุทุฑููุฉ ุฏูุน",
    color="ุญุงูุฉ ุงูุฏูุน", color_discrete_sequence=px.colors.qualitative.Bold
)
st.plotly_chart(fig_avg, use_container_width=True)

# ===== ๐ ุงูุชุฐุจุฐุจ =====
fig_std = px.bar(
    stats.reset_index(), x="ุญุงูุฉ ุงูุฏูุน", y="std",
    title="ุชุฐุจุฐุจ ุงูุฃุฏุงุก (ุงูุงูุญุฑุงู ุงููุนูุงุฑู)",
    color="ุญุงูุฉ ุงูุฏูุน", color_discrete_sequence=px.colors.qualitative.Prism
)
st.plotly_chart(fig_std, use_container_width=True)

# ===== ๐ ููุงุฑูุฉ ุจูู ุทุฑููุชูู ุฏูุน =====
if len(compare_methods) == 2:
    st.subheader(f"๐ ููุงุฑูุฉ ูุจุงุดุฑุฉ ุจูู {compare_methods[0]} ู {compare_methods[1]}")
    df_compare = df[df["ุญุงูุฉ ุงูุฏูุน"].isin(compare_methods)][["ุญุงูุฉ ุงูุฏูุน"] + list(selected_months)]
    df_compare_long = df_compare.melt(id_vars=["ุญุงูุฉ ุงูุฏูุน"], var_name="ุงูุดูุฑ", value_name="ุงููููุฉ")
    fig_compare = px.line(
        df_compare_long, x="ุงูุดูุฑ", y="ุงููููุฉ", color="ุญุงูุฉ ุงูุฏูุน", markers=True,
        title="ููุงุฑูุฉ ุงูุฃุฏุงุก ุจูู ุทุฑููุชูู ุฏูุน",
        color_discrete_sequence=px.colors.qualitative.Set1
    )
    st.plotly_chart(fig_compare, use_container_width=True)

# ===== ๐ ุฃุนูู ูุฃูู ุดูุฑ ููู ุทุฑููุฉ ุฏูุน =====
st.subheader("๐ ุฃุนูู ูุฃูู ุดูุฑ ููู ุทุฑููุฉ ุฏูุน")
for method in selected_methods:
    row = df[df["ุญุงูุฉ ุงูุฏูุน"] == method][selected_months].T
    row.columns = ["ุงููููุฉ"]
    row["ุงูุดูุฑ"] = row.index
    max_row = row.loc[row["ุงููููุฉ"].idxmax()]
    min_row = row.loc[row["ุงููููุฉ"].idxmin()]
    st.markdown(f"""
    - **{method}**  
      ุฃุนูู ุดูุฑ: {max_row['ุงูุดูุฑ']} ุจูุดุชุฑูุงุช {int(max_row['ุงููููุฉ']):,}  
      ุฃูู ุดูุฑ: {min_row['ุงูุดูุฑ']} ุจูุดุชุฑูุงุช {int(min_row['ุงููููุฉ']):,}
    """)

# ===== ๐ฌ ุชูุตูุงุช ูุชุญููุฒ =====
st.subheader("๐ฌ ุชูุตูุงุช ูุงููุฉ ูุชุญููุฒูุฉ")
for index, row in stats.iterrows():
    avg = row["mean"]
    std = row["std"]
    rate = row["change_rate"]
    if avg > df_long["ุงููููุฉ"].mean() and std < df_long["ุงููููุฉ"].std():
        st.markdown(f"- {index}: ุฃุฏุงุก ููู ููุชุฒูุ ููุงุณุจ ููุชูุณุน ุงููุงูู ุจุซูุฉ.")
    elif rate < 0.2:
        st.markdown(f"- {index}: ุชุฐุจุฐุจ ููุฎูุถุ ูุซุงูู ููุชุฎุทูุท ุทููู ุงููุฏู.")
    elif std > df_long["ุงููููุฉ"].std():
        st.markdown(f"- {index}: ุชุฐุจุฐุจ ูุฑุชูุนุ ุฑุงูุจ ุงูุฃุฏุงุก ุงูุดูุฑู ุจุนูุงูุฉ.")
    else:
        st.markdown(f"- {index}: ุฃุฏุงุก ูุชูุณุทุ ูููู ุชุญุณููู ุจุชุนุฏูู ุดุฑูุท ุงูุฏูุน ุฃู ุงูุชูููุช.")