import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# ุชุญููู ุงูุจูุงูุงุช
df = pd.read_csv("sales.csv")

# ุชูุธูู ุงูุฃุฑูุงู
months = [col for col in df.columns if col.startswith("Sales")]
for col in months:
    df[col] = df[col].astype(str).str.replace(",", "").str.strip()
    df[col] = pd.to_numeric(df[col], errors="coerce")

# ุฅุนุฏุงุฏ ุงูุตูุญุฉ
st.set_page_config(page_title="ุชุญููู ูุจูุนุงุช ุงูููุงุทู", layout="wide")
st.title("๐ ุชุญููู ูุจูุนุงุช ุงูููุงุทู ุนุจุฑ ุงูุดููุฑ")

# ุนุฑุถ ุงูุจูุงูุงุช ุงูุฃุตููุฉ
st.subheader("ุงูุจูุงูุงุช ุงูุฃุตููุฉ ุจุนุฏ ุงูุชูุธูู")
st.dataframe(df)

# ุชุญููู ุงูุจูุงูุงุช ูู Wide ุฅูู Long
df_long = df.melt(id_vars=["ุงูููุทูุฉ"], var_name="ุงูุดูุฑ", value_name="ุงููุจูุนุงุช")

# ุฑุณู ุจูุงูู ุฎุทู ูุชุทูุฑ
fig_line = px.line(
    df_long, x="ุงูุดูุฑ", y="ุงููุจูุนุงุช", color="ุงูููุทูุฉ", markers=True,
    title="ุชุทูุฑ ุงููุจูุนุงุช ููู ููุทูุฉ",
    color_discrete_sequence=px.colors.qualitative.Set2
)
st.plotly_chart(fig_line, use_container_width=True)

# ุฑุณู ุจูุงูู ุนููุฏู ูุชุฏุงุฎู
fig_bar = px.bar(
    df_long, x="ุงูุดูุฑ", y="ุงููุจูุนุงุช", color="ุงูููุทูุฉ", barmode="group",
    title="ููุงุฑูุฉ ุงููุจูุนุงุช ุจูู ุงูููุงุทู ูู ูู ุดูุฑ",
    color_discrete_sequence=px.colors.qualitative.Pastel
)
st.plotly_chart(fig_bar, use_container_width=True)

# ุฑุณู ุจูุงูู ุญุฑุงุฑู
pivot = df_long.pivot_table(index="ุงูููุทูุฉ", columns="ุงูุดูุฑ", values="ุงููุจูุนุงุช")
fig_heatmap = px.imshow(
    pivot, text_auto=True, aspect="auto",
    title="ุฎุฑูุทุฉ ุญุฑุงุฑูุฉ ูุฃุฏุงุก ุงููุจูุนุงุช",
    color_continuous_scale="Viridis"
)
st.plotly_chart(fig_heatmap, use_container_width=True)

# ุชุญููู ุดูุฑู ูุฃุนูู ูุฃูู ููุทูุฉ
st.subheader("ุชุญููู ุดูุฑู ูุฃุนูู ูุฃูู ููุทูุฉ")
for month in months:
    month_data = df[["ุงูููุทูุฉ", month]].dropna()
    top = month_data.loc[month_data[month].idxmax()]
    low = month_data.loc[month_data[month].idxmin()]
    st.markdown(f"""
    **{month}:**
    - ุงูุฃุนูู ูุจูุนูุง: {top['ุงูููุทูุฉ']} ุจูุจูุนุงุช {int(top[month]):,}
    - ุงูุฃูู ูุจูุนูุง: {low['ุงูููุทูุฉ']} ุจูุจูุนุงุช {int(low[month]):,}
    """)

# ุชุญููู ุงููุชูุณุท ูุงูุงูุญุฑุงู
st.subheader("ุชุญููู ูุชูุณุท ุงูุฃุฏุงุก ูุงูุชุฐุจุฐุจ")
summary = df_long.groupby("ุงูููุทูุฉ")["ุงููุจูุนุงุช"].agg(["mean", "std", "min", "max"])
summary["range"] = summary["max"] - summary["min"]
summary = summary.sort_values(by="mean", ascending=False)
st.dataframe(summary.style.format("{:,.0f}"))

# ุฑุณู ุจูุงูู ูุฃุนูู ูุชูุณุท
fig_avg = px.bar(
    summary.reset_index(), x="ุงูููุทูุฉ", y="mean",
    title="ูุชูุณุท ุงููุจูุนุงุช ููู ููุทูุฉ",
    color="ุงูููุทูุฉ", color_discrete_sequence=px.colors.qualitative.Bold
)
st.plotly_chart(fig_avg, use_container_width=True)

# ุฑุณู ุจูุงูู ููุชุฐุจุฐุจ
fig_std = px.bar(
    summary.reset_index(), x="ุงูููุทูุฉ", y="std",
    title="ุชุฐุจุฐุจ ุงูุฃุฏุงุก (ุงูุงูุญุฑุงู ุงููุนูุงุฑู)",
    color="ุงูููุทูุฉ", color_discrete_sequence=px.colors.qualitative.Prism
)
st.plotly_chart(fig_std, use_container_width=True)

# ุชุญููู ุงูุงุชุฌุงู ุงูุนุงู ููู ููุทูุฉ
st.subheader("ุชุญููู ุงูุงุชุฌุงู ุงูุนุงู")
trend = df_long.groupby(["ุงูููุทูุฉ", "ุงูุดูุฑ"])["ุงููุจูุนุงุช"].mean().reset_index()
fig_trend = px.line(
    trend, x="ุงูุดูุฑ", y="ุงููุจูุนุงุช", color="ุงูููุทูุฉ",
    title="ุงูุงุชุฌุงู ุงูุนุงู ูููุจูุนุงุช ุนุจุฑ ุงูุดููุฑ",
    color_discrete_sequence=px.colors.qualitative.Dark24
)
st.plotly_chart(fig_trend, use_container_width=True)

# ุฌูู ุชุญููุฒูุฉ ุฐููุฉ
st.subheader("ููุงุญุธุงุช ุชุญููุฒูุฉ ุญุณุจ ุงูุฃุฏุงุก")
for index, row in summary.iterrows():
    avg = row["mean"]
    std = row["std"]
    rng = row["range"]
    if avg > df_long["ุงููุจูุนุงุช"].mean() and std < df_long["ุงููุจูุนุงุช"].std():
        st.markdown(f"- {index}: ุฃุฏุงุก ููู ููุชุฒูุ ุญุงูุธ ุนูู ุงูุงุณุชูุฑุงุฑ ูุงุจุฏุฃ ุงูุชูุณุน ุจุซูุฉ.")
    elif avg > df_long["ุงููุจูุนุงุช"].mean():
        st.markdown(f"- {index}: ุฃุฏุงุก ูุฑุชูุนุ ููู ุฑุงูุจ ุงูุชุฐุจุฐุจ ูุถูุงู ุงูุงุณุชุฏุงูุฉ.")
    elif std < df_long["ุงููุจูุนุงุช"].std():
        st.markdown(f"- {index}: ุฃุฏุงุก ูุณุชูุฑุ ูุฑุตุฉ ููุชุงุฒุฉ ูุชุฌุฑุจุฉ ุงุณุชุฑุงุชูุฌูุงุช ุฌุฏูุฏุฉ.")
    else:
        st.markdown(f"- {index}: ุงูุชุฐุจุฐุจ ูุงุถุญุ ุฑุงุฌุน ููุงุท ุงูุถุนู ูุฑููุฒ ุนูู ุงูุชุญุณูู ุงูุชุฏุฑูุฌู.")
